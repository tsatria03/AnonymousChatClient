buffer@[]buffers(0);
int bufferpos=0;
class buffer_item
{
string name;
buffer_item(string n)
{
name=n;
}
}class buffer
{
string name;
bool interrupt=false;
bool muted=false;
buffer_item@[]items;
int bpos;
buffer(string n)
{
name=n;
}
void toggle_mute()
{
if(name=="alerts" or name=="all")
{
speak("This buffer can not be muted.",true);
}
else{
muted=muted?false:true;
speak(name+" "+(muted?"muted":"unmuted"),true);
}
}
}
int get_buffer_index(string name)
{
for(uint i=0; i<buffers.length(); i++)
{
if(buffers[i].name==name) return i;
}
return -1;
}
void create_buffer(string name)
{
if(get_buffer_index("all")<=-1)
{
buffer allbuffer("all");
buffers.insert_last(allbuffer);
}
buffer buffer1(name);
buffers.insert_last(buffer1);
}
void add_buffer_item(string buffername, string itemname)
{
    int b = get_buffer_index(buffername);
    if (b <= -1) return;
    buffer_item temp(itemname);
    buffers[b].items.insert_last(temp);
    if (!buffers[0].muted && buffername != "all") {
        buffers[0].items.insert_last(temp);
    }
    if (!buffers[b].muted) {
        speak(itemname, true);
    }
}
void export_buffers()
{
    string bufferdir = "logs";
    if (buffers.length() <= 0) return;
    if (!directory_exists(bufferdir)) directory_create(bufferdir);
    for (uint i = 0; i < buffers.length(); i++)
    {
        if (buffers[i].items.length() > 0)
        {
            logfile.open(bufferdir + "/" + buffers[i].name + ".log", "ab");
            logfile.write("Exported on " + DATE_MONTH + "/" + DATE_DAY + "/" + DATE_YEAR + "\r\n\r\n");
            string bdata = "";
            for (uint i2 = 0; i2 < buffers[i].items.length(); i2++)
            {
                bdata += buffers[i].items[i2].name + "\r\n";
            }
            logfile.write(bdata);
            logfile.close();
        }
    }
}
void mute_and_unmute_buffer()
{
if(bufferpos<0 or bufferpos>buffers.length()-1)
{
return;
}
else{
buffers[bufferpos].toggle_mute();
}
}
void next_buffer()
{
if(bufferpos>=buffers.length()-1)
{
bufferpos=buffers.length()-1;
}
else{
bufferpos++;
}
p.play_stationary_extended("bufferswitch.ogg",false,0,(bufferpos*100/buffers.length())-25,0,100,false);
speak(buffers[bufferpos].name + (buffers[bufferpos].muted ? ", muted, " : ", ") + (buffers[bufferpos].items.length() > 0 ? (buffers[bufferpos].bpos + 1) + " of " + buffers[bufferpos].items.length() : "empty") + ".", true);
}
void previous_buffer()
{
if(bufferpos<=0)
{
bufferpos=0;
}
else{
bufferpos--;
}
p.play_stationary_extended("bufferswitch.ogg",false,0,(bufferpos*100/buffers.length())-25,0,100,false);
speak(buffers[bufferpos].name + (buffers[bufferpos].muted ? ", muted, " : ", ") + (buffers[bufferpos].items.length() > 0 ? (buffers[bufferpos].bpos + 1) + " of " + buffers[bufferpos].items.length() : "empty") + ". ", true);
}
void next_buffer_item()
{
if(buffers[bufferpos].items.length()<=0)
{
speak("Empty.");
return;
}
if(buffers[bufferpos].bpos>=buffers[bufferpos].items.length()-1)
{
buffers[bufferpos].bpos=buffers[bufferpos].items.length()-1;
return;
}
else
{
buffers[bufferpos].bpos++;
}
p.play_stationary_extended("bufferchoose.ogg",false,0,(buffers[bufferpos].bpos*100/buffers[bufferpos].items.length())-60,0,(buffers[bufferpos].bpos*100/buffers[bufferpos].items.length())-5,false);
speak(buffers[bufferpos].items[buffers[bufferpos].bpos].name);
}
void previous_buffer_item()
{
if(buffers[bufferpos].items.length()<=0)
{
speak("Empty.");
return;
}
if(buffers[bufferpos].bpos<=0)
{
buffers[bufferpos].bpos=0;
return;
}
else
{
buffers[bufferpos].bpos--;
}
p.play_stationary_extended("bufferchoose.ogg",false,0,(buffers[bufferpos].bpos*100/buffers[bufferpos].items.length())-60,0,(buffers[bufferpos].bpos*100/buffers[bufferpos].items.length())-5,false);
speak(buffers[bufferpos].items[buffers[bufferpos].bpos].name);
}
void top_buffer_item()
{
if(buffers[bufferpos].items.length()==0)
{
speak("Empty.");
return;
}
buffers[bufferpos].bpos=0;
p.play_stationary_extended("bufferchoose.ogg",false,0,(buffers[bufferpos].bpos*100/buffers[bufferpos].items.length())-60,0,(buffers[bufferpos].bpos*100/buffers[bufferpos].items.length())-5,false);
speak(buffers[bufferpos].items[buffers[bufferpos].bpos].name);
}
void bottom_buffer_item()
{
if(buffers[bufferpos].items.length()==0)
{
speak("Empty.");
return;
}
buffers[bufferpos].bpos=buffers[bufferpos].items.length()-1;
p.play_stationary_extended("bufferchoose.ogg",false,0,(buffers[bufferpos].bpos*100/buffers[bufferpos].items.length())-60,0,(buffers[bufferpos].bpos*100/buffers[bufferpos].items.length())-5,false);
speak(buffers[bufferpos].items[buffers[bufferpos].bpos].name);
}
void copy_buffer_item()
{
if(buffers[bufferpos].items.length()<=0) return;
clipboard_copy_text(buffers[bufferpos].items[buffers[bufferpos].bpos].name);
speak("Copied to clipboard",true);
}
void clear_all_buffer_items()
{
for (uint i = 0; i < buffers.length(); i++)
{
buffers[i].items.resize(0);
buffers[i].bpos = 0;
}
}
